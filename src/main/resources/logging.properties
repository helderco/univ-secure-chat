# Configuration for JDK logging. To activate this, specify
# this file to the JVM with property
#
#   -Djava.util.logging.config.file=/path/to/logging.properties
#
# For JDK logging, the mapping is (you also have ALL and OFF)
#   error > SEVERE
#    warn > WARNING
#    info > INFO (default)
#   debug > FINE
#   trace > FINEST


# Global logging properties.
# ------------------------------------------
# The set of handlers to be loaded upon startup.
# Comma-separated list of class names.
# (? LogManager docs say no comma here, but JDK example has comma.)
handlers=java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# Loggers and Handlers may override this level
.level=INFO


# Handlers
# -----------------------------------------

# --- ConsoleHandler ---
# Override of global logging level
java.util.logging.ConsoleHandler.level=WARNING
java.util.logging.ConsoleHandler.formatter=org.siriux.LogFormatter

# --- FileHandler ---
# Override of global logging level
java.util.logging.FileHandler.level=ALL

# Naming style for the output file:
# (The output file is placed in the directory
# defined by the "user.home" System property.)
java.util.logging.FileHandler.pattern=/tmp/jacorb.log

# Limiting size of output file in bytes:
java.util.logging.FileHandler.limit=0

# Number of output files to cycle through, by appending an
# integer to the base file name:
java.util.logging.FileHandler.count=10

# Style of output (e.g. java.util.logging.SimpleFormatter):
java.util.logging.FileHandler.formatter=org.siriux.LogFormatter

# Don't append for a new file for each run
java.util.logging.FileHandler.append = false


# Loggers
# ------------------------------------------
# Loggers are usually attached to packages.
# Here, the level for each package is specified.
# The global level is used by default, so levels
# specified here simply act as an override.

#jacorb.level = OFF
#jacorb.orb.giop.level = FINE
#org.siriux.level = FINE
